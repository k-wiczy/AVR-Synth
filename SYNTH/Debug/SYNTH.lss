
SYNTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  00001094  00001128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001094  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  008002fe  008002fe  00001326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f9  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000924  00000000  00000000  00002539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068a  00000000  00000000  00002e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000034e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000979  00000000  00000000  00003b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000044a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 04 	jmp	0x976	; 0x976 <__ctors_end>
       4:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
       8:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
       c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      10:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      14:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      18:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      1c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      20:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      24:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      28:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      2c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_11>
      30:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      34:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      38:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      3c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      40:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      44:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      48:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      4c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      50:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      54:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      58:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      5c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      60:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      64:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__bad_interrupt>
      68:	f9 05       	cpc	r31, r9
      6a:	08 06       	cpc	r0, r24
      6c:	17 06       	cpc	r1, r23
      6e:	26 06       	cpc	r2, r22
      70:	35 06       	cpc	r3, r21
      72:	44 06       	cpc	r4, r20
      74:	53 06       	cpc	r5, r19
      76:	62 06       	cpc	r6, r18
      78:	70 06       	cpc	r7, r16

0000007a <PPP>:
      7a:	52 52 49 49 46 46 46 91 91 00 00 00 00 00 57 57     RRIIFFF.......WW
      8a:	41 56 56 45 45 66 6d 6d 74 74 20 10 10 00 00 00     AVVEEfmmtt .....
      9a:	00 00 01 01 00 01 01 00 00 40 1f 1f 00 00 00 40     .........@.....@
      aa:	40 1f 1f 00 00 00 01 01 00 00 08 00 00 64 64 61     @............dda
      ba:	74 74 61 61 6d 00 00 00 00 00 83 83 90 90 95 93     ttaam...........
      ca:	93 97 97 9e a2 a2 a2 a2 ac c0 c0 d6 d6 e7 ed ed     ................
      da:	ed ed f6 ff ff f4 f4 e1 e1 d6 c5 c5 a2 a2 81 71     ...............q
      ea:	71 6e 6e 75 7d 7d 86 86 98 ae ae b7 b7 b3 af af     qnnu}}..........
      fa:	b3 b3 b9 b9 b9 aa aa 98 97 97 94 94 80 70 70 6d     .............ppm
     10a:	6d 6c 61 61 52 52 44 44 34 26 26 19 19 0e 03 03     mlaaRRDD4&&.....
     11a:	01 01 0b 14 14 18 18 1c 22 22 29 29 36 4b 4b 63     ........""))6KKc
     12a:	63 75 7f 7f 87 87 8f 93 93 92 92 92 96 96 9e 9e     cu..............
     13a:	a6 a8 a8 a4 a4 9f a4 a4 ac ac a9 a9 9a 89 89 7b     ...............{
     14a:	7b 6f 65 65 60 60 65 74 74 83 83 8b 90 90 93 93     {oee``ett.......
     15a:	96 94 94 8c 8c 7e 6f 6f 61 61 53 45 45 3f 3f 3d     .....~ooaaSEE??=
     16a:	39 39 3a 3a 44 4a 4a 48 48 4c 58 58 66 66 73        99::DJJHHLXXffs

00000179 <DEF>:
     179:	52 52 49 49 46 46 46 91 91 00 00 00 00 00 57 57     RRIIFFF.......WW
     189:	41 56 56 45 45 66 6d 6d 74 74 20 10 10 00 00 00     AVVEEfmmtt .....
     199:	00 00 01 01 00 01 01 00 00 40 1f 1f 00 00 00 40     .........@.....@
     1a9:	40 1f 1f 00 00 00 01 01 00 00 08 00 00 64 64 61     @............dda
     1b9:	74 74 61 61 6d 00 00 00 00 00 80 80 86 86 8b 8f     ttaam...........
     1c9:	8f 93 93 95 98 98 9b 9b 9e a2 a2 a6 a6 ab b0 b0     ................
     1d9:	b4 b4 b9 bd bd c1 c1 c6 c6 cb cf cf d5 d5 da e0     ................
     1e9:	e0 e6 e6 ec f1 f1 f6 f6 fa fd fd fe fe fe fd fd     ................
     1f9:	f7 f7 ef e2 e2 cf cf b8 9d 9d 81 81 69 56 56 4a     ............iVVJ
     209:	4a 42 3e 3e 3a 3a 38 38 35 31 31 2e 2e 2a 28 28     JB>>::88511..*((
     219:	26 26 27 29 29 2c 2c 31 36 36 3d 3d 43 49 49 4e     &&')),,166==CIIN
     229:	4e 52 55 55 57 57 56 54 54 50 50 4a 41 41 37 37     NRUUWWVTTPPJAA77
     239:	2c 22 22 1a 1a 17 19 19 20 20 29 29 35 42 42 50     ,"".....  ))5BBP
     249:	50 5f 6d 6d 79 79 84 8d 8d 94 94 99 9c 9c 9e 9e     P_mmyy..........
     259:	9e 9e 9e 9c 9c 9a 97 97 94 94 90 8b 8b 86 86 82     ................
     269:	7d 7d 78 78 74 71 71 6e 6e 6e 6e 6e 71 71 75        }}xxtqqnnnnnqqu

00000278 <ABC>:
     278:	52 52 49 49 46 46 46 91 91 00 00 00 00 00 57 57     RRIIFFF.......WW
     288:	41 56 56 45 45 66 6d 6d 74 74 20 10 10 00 00 00     AVVEEfmmtt .....
     298:	00 00 01 01 00 01 01 00 00 40 1f 1f 00 00 00 40     .........@.....@
     2a8:	40 1f 1f 00 00 00 01 01 00 00 08 00 00 64 64 61     @............dda
     2b8:	74 74 61 61 6d 00 00 00 00 00 91 91 e2 e2 fa fd     ttaam...........
     2c8:	fd ff ff fd fb fb f7 f7 f4 ef ef ec ec e7 e4 e4     ................
     2d8:	df df dc d7 d7 d3 d3 ce ce cb c6 c6 c2 c2 be ba     ................
     2e8:	ba b6 b6 b2 ae ae a9 a9 a5 a1 a1 9d 9d 99 95 95     ................
     2f8:	90 90 8d 88 88 84 84 80 7c 7c 78 78 73 6f 6f 6b     ........||xxsook
     308:	6b 67 63 63 5f 5f 5a 5a 57 52 52 4f 4f 49 47 47     kgcc__ZZWRROOIGG
     318:	42 42 43 41 41 63 63 aa bc bc bc bc bb b6 b6 b3     BBCAAcc.........
     328:	b3 af ab ab a6 a6 a3 9e 9e 9a 9a 96 92 92 8d 8d     ................
     338:	8a 85 85 81 81 7d 79 79 75 75 70 70 6c 68 68 64     .....}yyuupplhhd
     348:	64 60 5c 5c 57 57 54 4f 4f 4b 4b 47 43 43 3f 3f     d`\\WWTOOKKGCC??
     358:	3b 36 36 32 32 2e 2a 2a 26 26 21 1e 1e 19 19 16     ;6622.**&&!.....
     368:	11 11 0e 0e 09 07 07 02 02 01 00 00 03 03 05        ...............

00000377 <XYZ>:
     377:	52 52 49 49 46 46 46 91 91 00 00 00 00 00 57 57     RRIIFFF.......WW
     387:	41 56 56 45 45 66 6d 6d 74 74 20 10 10 00 00 00     AVVEEfmmtt .....
     397:	00 00 01 01 00 01 01 00 00 40 1f 1f 00 00 00 40     .........@.....@
     3a7:	40 1f 1f 00 00 00 01 01 00 00 08 00 00 64 64 61     @............dda
     3b7:	74 74 61 61 6d 00 00 00 00 00 83 83 98 98 b1 ca     ttaam...........
     3c7:	ca e0 e0 f0 fa fa ff ff ff fa fa f0 f0 e1 cd cd     ................
     3d7:	b3 b3 97 7d 7d 67 67 59 59 50 4f 4f 57 57 65 75     ...}}ggYYPOOWWeu
     3e7:	75 83 83 8d 94 94 99 99 9e a0 a0 9e 9e 98 8c 8c     u...............
     3f7:	7a 7a 68 56 56 48 48 3f 3a 3a 3a 3a 3e 46 46 4f     zzhVVHH?::::>FFO
     407:	4f 59 63 63 6e 6e 7b 7b 87 91 91 99 99 9f a1 a1     OYccnn{{........
     417:	a0 a0 9b 95 95 90 90 8b 86 86 81 81 7d 7a 7a 78     ............}zzx
     427:	78 77 78 78 7a 7a 7e 82 82 85 85 88 89 89 89 89     xwxxzz~.........
     437:	87 85 85 82 82 7f 7b 7b 76 76 71 71 6e 6b 6b 6a     ......{{vvqqnkkj
     447:	6a 6a 6a 6a 6c 6c 6e 70 70 72 72 73 73 73 72 72     jjjjllnpprrsssrr
     457:	73 73 73 73 73 74 75 75 75 75 75 75 75 73 73 71     ssssstuuuuuuussq
     467:	6f 6f 6c 6c 68 65 65 60 60 5e 5d 5d 61 61 67        oollhee``^]]aag

00000476 <CELLO>:
     476:	80 80 80 81 81 82 82 83 83 84 85 85 86 86 87 88     ................
     486:	88 89 89 8a 8b 8b 8c 8d 8e 8e 8f 90 91 92 93 94     ................
     496:	96 97 99 9a 9b 9d 9e a0 a2 a4 a6 a8 aa ad b0 b4     ................
     4a6:	b8 bb bf c4 c8 cc d0 d4 d8 db df e2 e5 e8 ea ed     ................
     4b6:	ef f1 f3 f5 f7 f8 fa fb fc fd fe ff ff ff ff ff     ................
     4c6:	ff fe fe fc fb fa f8 f6 f4 f1 ee eb e9 e5 e1 dd     ................
     4d6:	d8 d4 d0 cb c7 c1 bc b7 b3 ad a8 a2 9d 97 92 8d     ................
     4e6:	87 81 7c 76 71 6c 67 62 5c 57 52 4e 49 45 40 3b     ..|vqlgb\WRNIE@;
     4f6:	37 34 30 2c 28 25 21 1f 1c 19 16 14 12 10 0e 0c     740,(%!.........
     506:	0a 08 07 06 04 03 02 02 01 00 00 00 00 00 00 00     ................
     516:	00 00 01 01 02 02 03 04 04 05 06 06 07 08 08 08     ................
     526:	09 09 09 09 0a 0a 0b 0c 0d 0e 10 11 13 14 16 17     ................
     536:	19 1b 1d 1e 20 22 24 27 2a 2d 30 33 36 3a 3d 40     .... "$'*-036:=@
     546:	42 45 48 4b 4d 50 52 54 56 58 5a 5c 5d 5f 60 62     BEHKMPRTVXZ\]_`b
     556:	64 65 66 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74     defhijklmnopqrst
     566:	75 76 76 77 78 79 79 7a 7b 7c 7c 7d 7d 7e 7f 7f     uvvwxyyz{||}}~..

00000576 <SINE>:
     576:	80 83 86 89 8c 8f 92 95 98 9b 9e a1 a4 a7 aa ad     ................
     586:	b0 b3 b6 b9 bb be c1 c3 c6 c9 cb ce d0 d2 d5 d7     ................
     596:	d9 db de e0 e2 e4 e5 e7 e9 eb ec ee ef f1 f2 f4     ................
     5a6:	f5 f6 f7 f8 f9 fa fb fb fc fd fd fe fe fe fe fe     ................
     5b6:	fe fe fe fe fe fe fd fd fc fb fb fa f9 f8 f7 f6     ................
     5c6:	f5 f4 f2 f1 f0 ee ed eb e9 e7 e6 e4 e2 e0 de dc     ................
     5d6:	d9 d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................
     5e6:	b0 ad aa a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     5f6:	80 7d 79 76 73 70 6d 6a 67 64 61 5e 5b 58 55 52     .}yvspmjgda^[XUR
     606:	4f 4c 49 47 44 41 3e 3c 39 37 34 32 2f 2d 2a 28     OLIGDA><9742/-*(
     616:	26 24 22 20 1d 1c 1a 18 16 14 13 11 10 0e 0d 0c     &$" ............
     626:	0a 09 08 07 06 05 04 04 03 02 02 01 01 01 01 01     ................
     636:	01 01 01 01 01 01 02 02 03 04 04 05 06 07 08 09     ................
     646:	0a 0b 0d 0e 0f 11 12 14 16 17 19 1b 1d 1f 21 23     ..............!#
     656:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL
     666:	4f 51 54 57 5a 5d 60 63 66 69 6c 70 73 76 79 7c     OQTWZ]`cfilpsvy|

00000676 <SAW>:
     676:	ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1 f0     ................
     686:	ef ee ed ec eb ea e9 e8 e7 e6 e5 e4 e3 e2 e1 e0     ................
     696:	df de dd dc db da d9 d8 d7 d6 d5 d4 d3 d2 d1 d0     ................
     6a6:	cf ce cd cc cb ca c9 c8 c7 c6 c5 c4 c3 c2 c1 c0     ................
     6b6:	bf be bd bc bb ba b9 b8 b7 b6 b5 b4 b3 b2 b1 b0     ................
     6c6:	af ae ad ac ab aa a9 a8 a7 a6 a5 a4 a3 a2 a1 a0     ................
     6d6:	9f 9e 9d 9c 9b 9a 99 98 97 96 95 94 93 92 91 90     ................
     6e6:	8f 8e 8d 8c 8b 8a 89 88 87 86 85 84 83 82 81 80     ................
     6f6:	7f 7e 7d 7c 7b 7a 79 78 77 76 75 74 73 72 71 70     .~}|{zyxwvutsrqp
     706:	6f 6e 6d 6c 6b 6a 69 68 67 66 65 64 63 62 61 60     onmlkjihgfedcba`
     716:	5f 5e 5d 5c 5b 5a 59 58 57 56 55 54 53 52 51 50     _^]\[ZYXWVUTSRQP
     726:	4f 4e 4d 4c 4b 4a 49 48 47 46 45 44 43 42 41 40     ONMLKJIHGFEDCBA@
     736:	3f 3e 3d 3c 3b 3a 39 38 37 36 35 34 33 32 31 30     ?>=<;:9876543210
     746:	2f 2e 2d 2c 2b 2a 29 28 27 26 25 24 23 22 21 20     /.-,+*)('&%$#"! 
     756:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     766:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................

00000776 <TRIANGLE>:
     776:	7f 81 83 85 87 89 8b 8d 8f 91 93 95 97 99 9b 9d     ................
     786:	9f a1 a3 a5 a7 a9 ab ad af b1 b3 b5 b7 b9 bb bd     ................
     796:	bf c1 c3 c5 c7 c9 cb cd cf d1 d3 d5 d7 d9 db dd     ................
     7a6:	df e1 e3 e5 e7 e9 eb ed ef f1 f3 f5 f7 f9 fb fd     ................
     7b6:	ff fd fb f9 f7 f5 f3 f1 ef ed eb e9 e7 e5 e3 e1     ................
     7c6:	df dd db d9 d7 d5 d3 d1 cf cd cb c9 c7 c5 c3 c1     ................
     7d6:	bf bd bb b9 b7 b5 b3 b1 af ad ab a9 a7 a5 a3 a1     ................
     7e6:	9f 9d 9b 99 97 95 93 91 8f 8d 8b 89 87 85 83 81     ................
     7f6:	7f 7d 7b 79 77 75 73 71 6f 6d 6b 69 67 65 63 61     .}{ywusqomkigeca
     806:	5f 5d 5b 59 57 55 53 51 4f 4d 4b 49 47 45 43 41     _][YWUSQOMKIGECA
     816:	3f 3d 3b 39 37 35 33 31 2f 2d 2b 29 27 25 23 21     ?=;97531/-+)'%#!
     826:	1f 1d 1b 19 17 15 13 11 0f 0d 0b 09 07 05 03 01     ................
     836:	01 03 05 07 09 0b 0d 0f 11 13 15 17 19 1b 1d 1f     ................
     846:	21 23 25 27 29 2b 2d 2f 31 33 35 37 39 3b 3d 3f     !#%')+-/13579;=?
     856:	41 43 45 47 49 4b 4d 4f 51 53 55 57 59 5b 5d 5f     ACEGIKMOQSUWY[]_
     866:	61 63 65 67 69 6b 6d 6f 71 73 75 77 79 7b 7d 7f     acegikmoqsuwy{}.

00000876 <PULSE>:
     876:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     886:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     896:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8a6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8c6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8d6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
	...

00000976 <__ctors_end>:
     976:	11 24       	eor	r1, r1
     978:	1f be       	out	0x3f, r1	; 63
     97a:	cf ef       	ldi	r28, 0xFF	; 255
     97c:	d8 e0       	ldi	r29, 0x08	; 8
     97e:	de bf       	out	0x3e, r29	; 62
     980:	cd bf       	out	0x3d, r28	; 61

00000982 <__do_copy_data>:
     982:	12 e0       	ldi	r17, 0x02	; 2
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b1 e0       	ldi	r27, 0x01	; 1
     988:	e4 e9       	ldi	r30, 0x94	; 148
     98a:	f0 e1       	ldi	r31, 0x10	; 16
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__do_copy_data+0x10>
     98e:	05 90       	lpm	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	ae 3f       	cpi	r26, 0xFE	; 254
     994:	b1 07       	cpc	r27, r17
     996:	d9 f7       	brne	.-10     	; 0x98e <__do_copy_data+0xc>

00000998 <__do_clear_bss>:
     998:	25 e0       	ldi	r18, 0x05	; 5
     99a:	ae ef       	ldi	r26, 0xFE	; 254
     99c:	b2 e0       	ldi	r27, 0x02	; 2
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <.do_clear_bss_start>

000009a0 <.do_clear_bss_loop>:
     9a0:	1d 92       	st	X+, r1

000009a2 <.do_clear_bss_start>:
     9a2:	ac 34       	cpi	r26, 0x4C	; 76
     9a4:	b2 07       	cpc	r27, r18
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <.do_clear_bss_loop>
     9a8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <main>
     9ac:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_exit>

000009b0 <__bad_interrupt>:
     9b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009b4 <USART_Init>:


void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = 0;
     9b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)(31);
     9b8:	8f e1       	ldi	r24, 0x1F	; 31
     9ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter */
	//UCSR0A = 0;
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9be:	88 e1       	ldi	r24, 0x18	; 24
     9c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     9ca:	08 95       	ret

000009cc <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while( !(UCSR0A & (1<<RXC0)) );
     9cc:	e0 ec       	ldi	r30, 0xC0	; 192
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	88 23       	and	r24, r24
     9d4:	ec f7       	brge	.-6      	; 0x9d0 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
     9d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     9da:	08 95       	ret

000009dc <main>:
int main(void)
{
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	da 95       	dec	r29
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
	short int velocity_tab[128] =
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e0 e0       	ldi	r30, 0x00	; 0
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	de 01       	movw	r26, r28
     9f8:	11 96       	adiw	r26, 0x01	; 1
     9fa:	01 90       	ld	r0, Z+
     9fc:	0d 92       	st	X+, r0
     9fe:	8a 95       	dec	r24
     a00:	e1 f7       	brne	.-8      	; 0x9fa <main+0x1e>
	
	unsigned char msg,note,vel;
	int prechan, chan;
	prechan = 0;
	chan = 0;
	Audio_init();
     a02:	0e 94 72 05 	call	0xae4	; 0xae4 <Audio_init>
	Synth_init(chan);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 d3 05 	call	0xba6	; 0xba6 <Synth_init>
	USART_Init(31);
     a0e:	8f e1       	ldi	r24, 0x1F	; 31
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 da 04 	call	0x9b4	; 0x9b4 <USART_Init>
		0, 0, 0, 0, 0, 0, 0, 0
	};
	
	unsigned char msg,note,vel;
	int prechan, chan;
	prechan = 0;
     a16:	e1 2c       	mov	r14, r1
     a18:	f1 2c       	mov	r15, r1
	Synth_init(chan);
	USART_Init(31);
	
	while (1)
	{
		msg = USART_Receive();
     a1a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <USART_Receive>
     a1e:	08 2f       	mov	r16, r24
		note = USART_Receive();
     a20:	0e 94 e6 04 	call	0x9cc	; 0x9cc <USART_Receive>
     a24:	c8 2e       	mov	r12, r24
		vel = USART_Receive();
     a26:	0e 94 e6 04 	call	0x9cc	; 0x9cc <USART_Receive>
     a2a:	d8 2e       	mov	r13, r24
		if((msg >> 4) == 9)
     a2c:	90 2f       	mov	r25, r16
     a2e:	92 95       	swap	r25
     a30:	9f 70       	andi	r25, 0x0F	; 15
     a32:	99 30       	cpi	r25, 0x09	; 9
     a34:	71 f5       	brne	.+92     	; 0xa92 <main+0xb6>
		{
			chan = msg & 0x0F;
     a36:	0f 70       	andi	r16, 0x0F	; 15
     a38:	10 e0       	ldi	r17, 0x00	; 0
			if(chan != prechan)
     a3a:	e0 16       	cp	r14, r16
     a3c:	f1 06       	cpc	r15, r17
     a3e:	19 f0       	breq	.+6      	; 0xa46 <main+0x6a>
			{
				Synth_init(chan);
     a40:	c8 01       	movw	r24, r16
     a42:	0e 94 d3 05 	call	0xba6	; 0xba6 <Synth_init>
			}
			prechan = chan;
			if(vel == 0)
     a46:	d1 10       	cpse	r13, r1
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <main+0x86>
			{
				NoteOff(phase[note]);
     a4a:	ec 2d       	mov	r30, r12
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	e0 50       	subi	r30, 0x00	; 0
     a54:	fe 4f       	sbci	r31, 0xFE	; 254
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	0e 94 94 07 	call	0xf28	; 0xf28 <NoteOff>
			chan = msg & 0x0F;
			if(chan != prechan)
			{
				Synth_init(chan);
			}
			prechan = chan;
     a5e:	78 01       	movw	r14, r16
     a60:	dc cf       	rjmp	.-72     	; 0xa1a <main+0x3e>
			{
				NoteOff(phase[note]);
			}
			else
			{
				NoteOn(phase[note],velocity_tab[vel]);
     a62:	ed 2d       	mov	r30, r13
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	8c 0f       	add	r24, r28
     a70:	9d 1f       	adc	r25, r29
     a72:	e8 0f       	add	r30, r24
     a74:	f9 1f       	adc	r31, r25
     a76:	60 81       	ld	r22, Z
     a78:	71 81       	ldd	r23, Z+1	; 0x01
     a7a:	ec 2d       	mov	r30, r12
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	e0 50       	subi	r30, 0x00	; 0
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	0e 94 64 07 	call	0xec8	; 0xec8 <NoteOn>
			chan = msg & 0x0F;
			if(chan != prechan)
			{
				Synth_init(chan);
			}
			prechan = chan;
     a8e:	78 01       	movw	r14, r16
     a90:	c4 cf       	rjmp	.-120    	; 0xa1a <main+0x3e>
			else
			{
				NoteOn(phase[note],velocity_tab[vel]);
			}
		}
		else if((msg >> 4) == 11)
     a92:	9b 30       	cpi	r25, 0x0B	; 11
     a94:	e1 f4       	brne	.+56     	; 0xace <main+0xf2>
		{
			if(note == 0x15)
     a96:	95 e1       	ldi	r25, 0x15	; 21
     a98:	c9 12       	cpse	r12, r25
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <main+0xca>
			{
				setFreq(vel+1);
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <setFreq>
     aa4:	ba cf       	rjmp	.-140    	; 0xa1a <main+0x3e>
			}
			else if(note == 0x16)
     aa6:	86 e1       	ldi	r24, 0x16	; 22
     aa8:	c8 12       	cpse	r12, r24
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <main+0xdc>
			{
				setDepth(vel+1);
     aac:	8d 2d       	mov	r24, r13
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <setDepth>
     ab6:	b1 cf       	rjmp	.-158    	; 0xa1a <main+0x3e>
			}
			else
			{
				NoteOffAll();
     ab8:	0e 94 7f 07 	call	0xefe	; 0xefe <NoteOffAll>
				setDepth(0);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <setDepth>
				setFreq(8000);
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	9f e1       	ldi	r25, 0x1F	; 31
     ac8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <setFreq>
     acc:	a6 cf       	rjmp	.-180    	; 0xa1a <main+0x3e>
			}
		}
		else
		{
			NoteOffAll();
     ace:	0e 94 7f 07 	call	0xefe	; 0xefe <NoteOffAll>
			setDepth(0);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <setDepth>
			setFreq(8000);
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	9f e1       	ldi	r25, 0x1F	; 31
     ade:	0e 94 ce 05 	call	0xb9c	; 0xb9c <setFreq>
     ae2:	9b cf       	rjmp	.-202    	; 0xa1a <main+0x3e>

00000ae4 <Audio_init>:



void Audio_init()
{
	cli();
     ae4:	f8 94       	cli
	//PWM TIMER
	
	DDRB = (1 << 3);
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	84 b9       	out	0x04, r24	; 4
	TCCR2A = 0;
     aea:	a0 eb       	ldi	r26, 0xB0	; 176
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	1c 92       	st	X, r1
	TCCR2B = 0;
     af0:	e1 eb       	ldi	r30, 0xB1	; 177
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	10 82       	st	Z, r1
	TCCR2A = (1<<COM2A1) | (1<<COM2B1) | (1<<WGM20);
     af6:	81 ea       	ldi	r24, 0xA1	; 161
     af8:	8c 93       	st	X, r24
	TCCR2B = (1<<CS20);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 83       	st	Z, r24
	OCR2A = 255;
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//SAMPLING TIMER
	TCCR1A = 0;
     b04:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
     b08:	e1 e8       	ldi	r30, 0x81	; 129
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	10 82       	st	Z, r1
	TCNT1 = 0;
     b0e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b12:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	TCCR1B |= (1 << CS10) | (1 << WGM12); //clk divider (1/1) -> f = 16000000 / 2000 = 8000 = fPWM
     b16:	80 81       	ld	r24, Z
     b18:	89 60       	ori	r24, 0x09	; 9
     b1a:	80 83       	st	Z, r24
	OCR1A = 2000; //as above
     b1c:	80 ed       	ldi	r24, 0xD0	; 208
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1 << OCIE1A); //interrupt mode flag
     b28:	ef e6       	ldi	r30, 0x6F	; 111
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	82 60       	ori	r24, 0x02	; 2
     b30:	80 83       	st	Z, r24
	update = 0;
     b32:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <update+0x1>
     b36:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <update>
	sei();
     b3a:	78 94       	sei
     b3c:	08 95       	ret

00000b3e <__vector_11>:
} 

ISR(TIMER1_COMPA_vect)
{
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
	
	OCR2A = get_OSC_sample();
     b60:	0e 94 8e 06 	call	0xd1c	; 0xd1c <get_OSC_sample>
     b64:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <setDepth>:
volatile int iteracja = 0;
volatile short int mode = 0;

void setDepth(int depthh)
{
	skok = depthh/7;
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	0e 94 1a 08 	call	0x1034	; 0x1034 <__divmodhi4>
     b92:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <skok+0x1>
     b96:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <skok>
     b9a:	08 95       	ret

00000b9c <setFreq>:
	//depth = 0;
}
void setFreq(int freqq)
{
	freq = freqq;
     b9c:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <freq+0x1>
     ba0:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <freq>
     ba4:	08 95       	ret

00000ba6 <Synth_init>:
}

void Synth_init(int chan)
{
	
	ilosc_glosow = 0;
     ba6:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <ilosc_glosow+0x1>
     baa:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <ilosc_glosow>
     bae:	aa e0       	ldi	r26, 0x0A	; 10
     bb0:	b5 e0       	ldi	r27, 0x05	; 5
     bb2:	4a e4       	ldi	r20, 0x4A	; 74
     bb4:	55 e0       	ldi	r21, 0x05	; 5
	for(int i = 0; i < MAX_VOICES; i++)
	{
		glos[i].current = 0;
		glos[i].phase = 0;
		glos[i].depth = 0;
		glos[i].velocity = 1;
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
{
	
	ilosc_glosow = 0;
	for(int i = 0; i < MAX_VOICES; i++)
	{
		glos[i].current = 0;
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	1c 92       	st	X, r1
     bbe:	1e 92       	st	-X, r1
     bc0:	12 97       	sbiw	r26, 0x02	; 2
		glos[i].phase = 0;
     bc2:	11 96       	adiw	r26, 0x01	; 1
     bc4:	1c 92       	st	X, r1
     bc6:	1e 92       	st	-X, r1
		glos[i].depth = 0;
     bc8:	17 96       	adiw	r26, 0x07	; 7
     bca:	1c 92       	st	X, r1
     bcc:	1e 92       	st	-X, r1
     bce:	16 97       	sbiw	r26, 0x06	; 6
		glos[i].velocity = 1;
     bd0:	15 96       	adiw	r26, 0x05	; 5
     bd2:	3c 93       	st	X, r19
     bd4:	2e 93       	st	-X, r18
     bd6:	14 97       	sbiw	r26, 0x04	; 4
     bd8:	18 96       	adiw	r26, 0x08	; 8

void Synth_init(int chan)
{
	
	ilosc_glosow = 0;
	for(int i = 0; i < MAX_VOICES; i++)
     bda:	a4 17       	cp	r26, r20
     bdc:	b5 07       	cpc	r27, r21
     bde:	69 f7       	brne	.-38     	; 0xbba <Synth_init+0x14>
		glos[i].current = 0;
		glos[i].phase = 0;
		glos[i].depth = 0;
		glos[i].velocity = 1;
	}
	switch(chan)
     be0:	89 30       	cpi	r24, 0x09	; 9
     be2:	91 05       	cpc	r25, r1
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <Synth_init+0x42>
     be6:	8b c0       	rjmp	.+278    	; 0xcfe <Synth_init+0x158>
     be8:	fc 01       	movw	r30, r24
     bea:	ec 5c       	subi	r30, 0xCC	; 204
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__tablejump2__>
     bf2:	e6 e7       	ldi	r30, 0x76	; 118
     bf4:	f5 e0       	ldi	r31, 0x05	; 5
     bf6:	a8 e0       	ldi	r26, 0x08	; 8
     bf8:	b3 e0       	ldi	r27, 0x03	; 3
     bfa:	28 e0       	ldi	r18, 0x08	; 8
     bfc:	35 e0       	ldi	r19, 0x05	; 5
	{
		case 0 :
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&SINE[i]);
     bfe:	84 91       	lpm	r24, Z
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	8d 93       	st	X+, r24
     c04:	9d 93       	st	X+, r25
     c06:	31 96       	adiw	r30, 0x01	; 1
		glos[i].velocity = 1;
	}
	switch(chan)
	{
		case 0 :
			for(int i = 0; i < 256; i++)
     c08:	2a 17       	cp	r18, r26
     c0a:	3b 07       	cpc	r19, r27
     c0c:	c1 f7       	brne	.-16     	; 0xbfe <Synth_init+0x58>
     c0e:	08 95       	ret
     c10:	e6 e7       	ldi	r30, 0x76	; 118
     c12:	f8 e0       	ldi	r31, 0x08	; 8
     c14:	a8 e0       	ldi	r26, 0x08	; 8
     c16:	b3 e0       	ldi	r27, 0x03	; 3
     c18:	28 e0       	ldi	r18, 0x08	; 8
     c1a:	35 e0       	ldi	r19, 0x05	; 5
			}
		break;
		case 1 :
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&PULSE[i]);
     c1c:	84 91       	lpm	r24, Z
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	8d 93       	st	X+, r24
     c22:	9d 93       	st	X+, r25
     c24:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&SINE[i]);
			}
		break;
		case 1 :
			for(int i = 0; i < 256; i++)
     c26:	2a 17       	cp	r18, r26
     c28:	3b 07       	cpc	r19, r27
     c2a:	c1 f7       	brne	.-16     	; 0xc1c <Synth_init+0x76>
     c2c:	08 95       	ret
     c2e:	e6 e7       	ldi	r30, 0x76	; 118
     c30:	f7 e0       	ldi	r31, 0x07	; 7
     c32:	a8 e0       	ldi	r26, 0x08	; 8
     c34:	b3 e0       	ldi	r27, 0x03	; 3
     c36:	28 e0       	ldi	r18, 0x08	; 8
     c38:	35 e0       	ldi	r19, 0x05	; 5
			}
		break;
		case 2 :
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&TRIANGLE[i]);
     c3a:	84 91       	lpm	r24, Z
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	8d 93       	st	X+, r24
     c40:	9d 93       	st	X+, r25
     c42:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&PULSE[i]);
			}
		break;
		case 2 :
			for(int i = 0; i < 256; i++)
     c44:	2a 17       	cp	r18, r26
     c46:	3b 07       	cpc	r19, r27
     c48:	c1 f7       	brne	.-16     	; 0xc3a <Synth_init+0x94>
     c4a:	08 95       	ret
     c4c:	e6 e7       	ldi	r30, 0x76	; 118
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	a8 e0       	ldi	r26, 0x08	; 8
     c52:	b3 e0       	ldi	r27, 0x03	; 3
     c54:	28 e0       	ldi	r18, 0x08	; 8
     c56:	35 e0       	ldi	r19, 0x05	; 5
			}
		break;
		case 3 :
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&SAW[i]);
     c58:	84 91       	lpm	r24, Z
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	8d 93       	st	X+, r24
     c5e:	9d 93       	st	X+, r25
     c60:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&TRIANGLE[i]);
			}
		break;
		case 3 :
			for(int i = 0; i < 256; i++)
     c62:	2a 17       	cp	r18, r26
     c64:	3b 07       	cpc	r19, r27
     c66:	c1 f7       	brne	.-16     	; 0xc58 <Synth_init+0xb2>
     c68:	08 95       	ret
     c6a:	e6 e7       	ldi	r30, 0x76	; 118
     c6c:	f4 e0       	ldi	r31, 0x04	; 4
     c6e:	a8 e0       	ldi	r26, 0x08	; 8
     c70:	b3 e0       	ldi	r27, 0x03	; 3
     c72:	28 e0       	ldi	r18, 0x08	; 8
     c74:	35 e0       	ldi	r19, 0x05	; 5
			}
		break;
		case 4 : 
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&CELLO[i]);
     c76:	84 91       	lpm	r24, Z
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	8d 93       	st	X+, r24
     c7c:	9d 93       	st	X+, r25
     c7e:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&SAW[i]);
			}
		break;
		case 4 : 
			for(int i = 0; i < 256; i++)
     c80:	2a 17       	cp	r18, r26
     c82:	3b 07       	cpc	r19, r27
     c84:	c1 f7       	brne	.-16     	; 0xc76 <Synth_init+0xd0>
     c86:	08 95       	ret
     c88:	e7 e7       	ldi	r30, 0x77	; 119
     c8a:	f3 e0       	ldi	r31, 0x03	; 3
     c8c:	a8 e0       	ldi	r26, 0x08	; 8
     c8e:	b3 e0       	ldi	r27, 0x03	; 3
     c90:	28 e0       	ldi	r18, 0x08	; 8
     c92:	35 e0       	ldi	r19, 0x05	; 5
			}
		break;
		case 5:
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&XYZ[i]);
     c94:	84 91       	lpm	r24, Z
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	8d 93       	st	X+, r24
     c9a:	9d 93       	st	X+, r25
     c9c:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&CELLO[i]);
			}
		break;
		case 5:
			for(int i = 0; i < 256; i++)
     c9e:	2a 17       	cp	r18, r26
     ca0:	3b 07       	cpc	r19, r27
     ca2:	c1 f7       	brne	.-16     	; 0xc94 <Synth_init+0xee>
     ca4:	08 95       	ret
     ca6:	e8 e7       	ldi	r30, 0x78	; 120
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	a8 e0       	ldi	r26, 0x08	; 8
     cac:	b3 e0       	ldi	r27, 0x03	; 3
     cae:	28 e0       	ldi	r18, 0x08	; 8
     cb0:	35 e0       	ldi	r19, 0x05	; 5
			}
			break;
		case 6:
		for(int i = 0; i < 256; i++)
		{
			wave[i] = pgm_read_byte_near(&ABC[i]);
     cb2:	84 91       	lpm	r24, Z
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	8d 93       	st	X+, r24
     cb8:	9d 93       	st	X+, r25
     cba:	31 96       	adiw	r30, 0x01	; 1
			{
				wave[i] = pgm_read_byte_near(&XYZ[i]);
			}
			break;
		case 6:
		for(int i = 0; i < 256; i++)
     cbc:	2a 17       	cp	r18, r26
     cbe:	3b 07       	cpc	r19, r27
     cc0:	c1 f7       	brne	.-16     	; 0xcb2 <Synth_init+0x10c>
     cc2:	08 95       	ret
     cc4:	e9 e7       	ldi	r30, 0x79	; 121
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	a8 e0       	ldi	r26, 0x08	; 8
     cca:	b3 e0       	ldi	r27, 0x03	; 3
     ccc:	28 e0       	ldi	r18, 0x08	; 8
     cce:	35 e0       	ldi	r19, 0x05	; 5
		}
		break;
		case 7:
		for(int i = 0; i < 256; i++)
		{
			wave[i] = pgm_read_byte_near(&DEF[i]);
     cd0:	84 91       	lpm	r24, Z
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	8d 93       	st	X+, r24
     cd6:	9d 93       	st	X+, r25
     cd8:	31 96       	adiw	r30, 0x01	; 1
		{
			wave[i] = pgm_read_byte_near(&ABC[i]);
		}
		break;
		case 7:
		for(int i = 0; i < 256; i++)
     cda:	a2 17       	cp	r26, r18
     cdc:	b3 07       	cpc	r27, r19
     cde:	c1 f7       	brne	.-16     	; 0xcd0 <Synth_init+0x12a>
     ce0:	ea e7       	ldi	r30, 0x7A	; 122
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	a8 e0       	ldi	r26, 0x08	; 8
     ce6:	b3 e0       	ldi	r27, 0x03	; 3
     ce8:	28 e0       	ldi	r18, 0x08	; 8
     cea:	35 e0       	ldi	r19, 0x05	; 5
			wave[i] = pgm_read_byte_near(&DEF[i]);
		}
		case 8:
		for(int i = 0; i < 256; i++)
		{
			wave[i] = pgm_read_byte_near(&PPP[i]);
     cec:	84 91       	lpm	r24, Z
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	8d 93       	st	X+, r24
     cf2:	9d 93       	st	X+, r25
     cf4:	31 96       	adiw	r30, 0x01	; 1
		for(int i = 0; i < 256; i++)
		{
			wave[i] = pgm_read_byte_near(&DEF[i]);
		}
		case 8:
		for(int i = 0; i < 256; i++)
     cf6:	a2 17       	cp	r26, r18
     cf8:	b3 07       	cpc	r27, r19
     cfa:	c1 f7       	brne	.-16     	; 0xcec <Synth_init+0x146>
     cfc:	08 95       	ret
     cfe:	e6 e7       	ldi	r30, 0x76	; 118
     d00:	f5 e0       	ldi	r31, 0x05	; 5
     d02:	a8 e0       	ldi	r26, 0x08	; 8
     d04:	b3 e0       	ldi	r27, 0x03	; 3
     d06:	28 e0       	ldi	r18, 0x08	; 8
     d08:	35 e0       	ldi	r19, 0x05	; 5
		}
		break;
		default:
			for(int i = 0; i < 256; i++)
			{
				wave[i] = pgm_read_byte_near(&SINE[i]);
     d0a:	84 91       	lpm	r24, Z
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	8d 93       	st	X+, r24
     d10:	9d 93       	st	X+, r25
     d12:	31 96       	adiw	r30, 0x01	; 1
		{
			wave[i] = pgm_read_byte_near(&PPP[i]);
		}
		break;
		default:
			for(int i = 0; i < 256; i++)
     d14:	2a 17       	cp	r18, r26
     d16:	3b 07       	cpc	r19, r27
     d18:	c1 f7       	brne	.-16     	; 0xd0a <Synth_init+0x164>
     d1a:	08 95       	ret

00000d1c <get_OSC_sample>:
	
	
}

short int get_OSC_sample()
{
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
	short int out = 0;
	iteracja++;
     d24:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <iteracja>
     d28:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <iteracja+0x1>
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <iteracja+0x1>
     d32:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <iteracja>
	if(iteracja > (freq * 10))
     d36:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <freq>
     d3a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <freq+0x1>
     d3e:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <iteracja>
     d42:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <iteracja+0x1>
     d46:	ac 01       	movw	r20, r24
     d48:	44 0f       	add	r20, r20
     d4a:	55 1f       	adc	r21, r21
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	84 0f       	add	r24, r20
     d5a:	95 1f       	adc	r25, r21
     d5c:	82 17       	cp	r24, r18
     d5e:	93 07       	cpc	r25, r19
     d60:	0c f0       	brlt	.+2      	; 0xd64 <get_OSC_sample+0x48>
     d62:	60 c0       	rjmp	.+192    	; 0xe24 <get_OSC_sample+0x108>
	{
		if(mode == 0)
     d64:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end>
     d68:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__data_end+0x1>
     d6c:	89 2b       	or	r24, r25
     d6e:	d1 f4       	brne	.+52     	; 0xda4 <get_OSC_sample+0x88>
		{
			
			depth+=1;
     d70:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <depth>
     d74:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <depth+0x1>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <depth+0x1>
     d7e:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <depth>
			if(depth > skok) mode = 1;
     d82:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <depth>
     d86:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <depth+0x1>
     d8a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <skok>
     d8e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <skok+0x1>
     d92:	82 17       	cp	r24, r18
     d94:	93 07       	cpc	r25, r19
     d96:	34 f4       	brge	.+12     	; 0xda4 <get_OSC_sample+0x88>
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <__data_end+0x1>
     da0:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__data_end>
		}
		if(mode == 1)
     da4:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end>
     da8:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__data_end+0x1>
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	e9 f4       	brne	.+58     	; 0xdea <get_OSC_sample+0xce>
		{
			depth-=1;
     db0:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <depth>
     db4:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <depth+0x1>
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <depth+0x1>
     dbe:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <depth>
			if(depth < (-1*skok)) mode = 2;
     dc2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <skok>
     dc6:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <skok+0x1>
     dca:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <depth>
     dce:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <depth+0x1>
     dd2:	91 95       	neg	r25
     dd4:	81 95       	neg	r24
     dd6:	91 09       	sbc	r25, r1
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	34 f4       	brge	.+12     	; 0xdea <get_OSC_sample+0xce>
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <__data_end+0x1>
     de6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__data_end>
		}
		if(mode == 2)
     dea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end>
     dee:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__data_end+0x1>
     df2:	02 97       	sbiw	r24, 0x02	; 2
     df4:	99 f4       	brne	.+38     	; 0xe1c <get_OSC_sample+0x100>
		{
			depth+=1;
     df6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <depth>
     dfa:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <depth+0x1>
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <depth+0x1>
     e04:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <depth>
			if(depth == 0) mode = 0;
     e08:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <depth>
     e0c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <depth+0x1>
     e10:	89 2b       	or	r24, r25
     e12:	21 f4       	brne	.+8      	; 0xe1c <get_OSC_sample+0x100>
     e14:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <__data_end+0x1>
     e18:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__data_end>
		}
		iteracja = 0;
     e1c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <iteracja+0x1>
     e20:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <iteracja>
	}		
	for(int i = 0; i < ilosc_glosow; i++)
     e24:	c0 91 4a 05 	lds	r28, 0x054A	; 0x80054a <ilosc_glosow>
     e28:	d0 91 4b 05 	lds	r29, 0x054B	; 0x80054b <ilosc_glosow+0x1>
     e2c:	1c 16       	cp	r1, r28
     e2e:	1d 06       	cpc	r1, r29
     e30:	d4 f5       	brge	.+116    	; 0xea6 <get_OSC_sample+0x18a>
     e32:	ea e0       	ldi	r30, 0x0A	; 10
     e34:	f5 e0       	ldi	r31, 0x05	; 5
     e36:	cc 0f       	add	r28, r28
     e38:	dd 1f       	adc	r29, r29
     e3a:	cc 0f       	add	r28, r28
     e3c:	dd 1f       	adc	r29, r29
     e3e:	cc 0f       	add	r28, r28
     e40:	dd 1f       	adc	r29, r29
     e42:	c6 5f       	subi	r28, 0xF6	; 246
     e44:	da 4f       	sbci	r29, 0xFA	; 250
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
	{
		glos[i].current += (glos[i].phase+depth);
		if(glos[i].current >= 25600) glos[i].current -= 25600;
		out += wave[(glos[i].current)/100];
     e4a:	04 e6       	ldi	r16, 0x64	; 100
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	df 01       	movw	r26, r30
		}
		iteracja = 0;
	}		
	for(int i = 0; i < ilosc_glosow; i++)
	{
		glos[i].current += (glos[i].phase+depth);
     e50:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <depth>
     e54:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <depth+0x1>
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	42 81       	ldd	r20, Z+2	; 0x02
     e62:	53 81       	ldd	r21, Z+3	; 0x03
     e64:	84 0f       	add	r24, r20
     e66:	95 1f       	adc	r25, r21
		if(glos[i].current >= 25600) glos[i].current -= 25600;
     e68:	81 15       	cp	r24, r1
     e6a:	44 e6       	ldi	r20, 0x64	; 100
     e6c:	94 07       	cpc	r25, r20
     e6e:	1c f4       	brge	.+6      	; 0xe76 <get_OSC_sample+0x15a>
		}
		iteracja = 0;
	}		
	for(int i = 0; i < ilosc_glosow; i++)
	{
		glos[i].current += (glos[i].phase+depth);
     e70:	93 83       	std	Z+3, r25	; 0x03
     e72:	82 83       	std	Z+2, r24	; 0x02
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <get_OSC_sample+0x160>
		if(glos[i].current >= 25600) glos[i].current -= 25600;
     e76:	94 56       	subi	r25, 0x64	; 100
     e78:	93 83       	std	Z+3, r25	; 0x03
     e7a:	82 83       	std	Z+2, r24	; 0x02
		out += wave[(glos[i].current)/100];
     e7c:	12 96       	adiw	r26, 0x02	; 2
     e7e:	8d 91       	ld	r24, X+
     e80:	9c 91       	ld	r25, X
     e82:	13 97       	sbiw	r26, 0x03	; 3
     e84:	b8 01       	movw	r22, r16
     e86:	0e 94 1a 08 	call	0x1034	; 0x1034 <__divmodhi4>
     e8a:	db 01       	movw	r26, r22
     e8c:	aa 0f       	add	r26, r26
     e8e:	bb 1f       	adc	r27, r27
     e90:	a8 5f       	subi	r26, 0xF8	; 248
     e92:	bc 4f       	sbci	r27, 0xFC	; 252
     e94:	8d 91       	ld	r24, X+
     e96:	9c 91       	ld	r25, X
     e98:	28 0f       	add	r18, r24
     e9a:	39 1f       	adc	r19, r25
     e9c:	38 96       	adiw	r30, 0x08	; 8
			depth+=1;
			if(depth == 0) mode = 0;
		}
		iteracja = 0;
	}		
	for(int i = 0; i < ilosc_glosow; i++)
     e9e:	ec 17       	cp	r30, r28
     ea0:	fd 07       	cpc	r31, r29
     ea2:	a9 f6       	brne	.-86     	; 0xe4e <get_OSC_sample+0x132>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <get_OSC_sample+0x18e>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
		glos[i].current += (glos[i].phase+depth);
		if(glos[i].current >= 25600) glos[i].current -= 25600;
		out += wave[(glos[i].current)/100];
	}
	out /= MAX_VOICES;
	return out;
     eaa:	c9 01       	movw	r24, r18
     eac:	99 23       	and	r25, r25
     eae:	0c f4       	brge	.+2      	; 0xeb2 <get_OSC_sample+0x196>
     eb0:	07 96       	adiw	r24, 0x07	; 7
}
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	95 95       	asr	r25
     ebc:	87 95       	ror	r24
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <NoteOn>:

void NoteOn(int phase,int velocity)
{
	if(ilosc_glosow < 8)
     ec8:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <ilosc_glosow>
     ecc:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <ilosc_glosow+0x1>
     ed0:	28 30       	cpi	r18, 0x08	; 8
     ed2:	31 05       	cpc	r19, r1
     ed4:	9c f4       	brge	.+38     	; 0xefc <NoteOn+0x34>
	{
		glos[ilosc_glosow].phase = phase;
     ed6:	f9 01       	movw	r30, r18
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	e6 5f       	subi	r30, 0xF6	; 246
     ee6:	fa 4f       	sbci	r31, 0xFA	; 250
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
		glos[ilosc_glosow].velocity = velocity;
     eec:	75 83       	std	Z+5, r23	; 0x05
     eee:	64 83       	std	Z+4, r22	; 0x04
		ilosc_glosow++;
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	30 93 4b 05 	sts	0x054B, r19	; 0x80054b <ilosc_glosow+0x1>
     ef8:	20 93 4a 05 	sts	0x054A, r18	; 0x80054a <ilosc_glosow>
     efc:	08 95       	ret

00000efe <NoteOffAll>:
	}
}
void NoteOffAll()
{
	ilosc_glosow = 0;
     efe:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <ilosc_glosow+0x1>
     f02:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <ilosc_glosow>
     f06:	ea e0       	ldi	r30, 0x0A	; 10
     f08:	f5 e0       	ldi	r31, 0x05	; 5
     f0a:	2a e4       	ldi	r18, 0x4A	; 74
     f0c:	35 e0       	ldi	r19, 0x05	; 5
	for(int i = 0; i < MAX_VOICES; i++)
	{
		glos[i].current = 0;
		glos[i].phase = 0;
		glos[i].velocity = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
void NoteOffAll()
{
	ilosc_glosow = 0;
	for(int i = 0; i < MAX_VOICES; i++)
	{
		glos[i].current = 0;
     f12:	13 82       	std	Z+3, r1	; 0x03
     f14:	12 82       	std	Z+2, r1	; 0x02
		glos[i].phase = 0;
     f16:	11 82       	std	Z+1, r1	; 0x01
     f18:	10 82       	st	Z, r1
		glos[i].velocity = 1;
     f1a:	95 83       	std	Z+5, r25	; 0x05
     f1c:	84 83       	std	Z+4, r24	; 0x04
     f1e:	38 96       	adiw	r30, 0x08	; 8
	}
}
void NoteOffAll()
{
	ilosc_glosow = 0;
	for(int i = 0; i < MAX_VOICES; i++)
     f20:	e2 17       	cp	r30, r18
     f22:	f3 07       	cpc	r31, r19
     f24:	b1 f7       	brne	.-20     	; 0xf12 <NoteOffAll+0x14>
	{
		glos[i].current = 0;
		glos[i].phase = 0;
		glos[i].velocity = 1;
	}
}
     f26:	08 95       	ret

00000f28 <NoteOff>:
void NoteOff(int phase)
{
     f28:	9f 92       	push	r9
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	c0 54       	subi	r28, 0x40	; 64
     f44:	d1 09       	sbc	r29, r1
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	if(ilosc_glosow > 0)
     f50:	c0 90 4a 05 	lds	r12, 0x054A	; 0x80054a <ilosc_glosow>
     f54:	d0 90 4b 05 	lds	r13, 0x054B	; 0x80054b <ilosc_glosow+0x1>
     f58:	1c 14       	cp	r1, r12
     f5a:	1d 04       	cpc	r1, r13
     f5c:	0c f0       	brlt	.+2      	; 0xf60 <NoteOff+0x38>
     f5e:	57 c0       	rjmp	.+174    	; 0x100e <NoteOff+0xe6>
     f60:	ae 01       	movw	r20, r28
     f62:	4f 5f       	subi	r20, 0xFF	; 255
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	7e 01       	movw	r14, r28
     f68:	21 e4       	ldi	r18, 0x41	; 65
     f6a:	e2 0e       	add	r14, r18
     f6c:	f1 1c       	adc	r15, r1
     f6e:	fa 01       	movw	r30, r20
	{
		
		VOICE tmp[MAX_VOICES];
		for(int i = 0; i < MAX_VOICES; i++)
		{
			tmp[i].current = 0;
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	12 82       	std	Z+2, r1	; 0x02
			tmp[i].phase = 0;
     f74:	11 82       	std	Z+1, r1	; 0x01
     f76:	10 82       	st	Z, r1
     f78:	38 96       	adiw	r30, 0x08	; 8
{
	if(ilosc_glosow > 0)
	{
		
		VOICE tmp[MAX_VOICES];
		for(int i = 0; i < MAX_VOICES; i++)
     f7a:	ee 15       	cp	r30, r14
     f7c:	ff 05       	cpc	r31, r15
     f7e:	c1 f7       	brne	.-16     	; 0xf70 <NoteOff+0x48>
     f80:	6a e0       	ldi	r22, 0x0A	; 10
     f82:	75 e0       	ldi	r23, 0x05	; 5
     f84:	96 01       	movw	r18, r12
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	d9 01       	movw	r26, r18
     f94:	a6 5f       	subi	r26, 0xF6	; 246
     f96:	ba 4f       	sbci	r27, 0xFA	; 250
     f98:	5d 01       	movw	r10, r26
     f9a:	9b 01       	movw	r18, r22
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	10 e0       	ldi	r17, 0x00	; 0
			tmp[i].phase = 0;
		}
		int j = 0;
		for(int i = 0; i < ilosc_glosow; i++)
		{
			if(glos[i].phase != phase)
     fa0:	d9 01       	movw	r26, r18
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	e8 17       	cp	r30, r24
     fa8:	f9 07       	cpc	r31, r25
     faa:	b9 f0       	breq	.+46     	; 0xfda <NoteOff+0xb2>
			{
				tmp[j] = glos[i];
     fac:	d8 01       	movw	r26, r16
     fae:	aa 0f       	add	r26, r26
     fb0:	bb 1f       	adc	r27, r27
     fb2:	aa 0f       	add	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	aa 0f       	add	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	e1 e0       	ldi	r30, 0x01	; 1
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ec 0f       	add	r30, r28
     fc0:	fd 1f       	adc	r31, r29
     fc2:	ae 0f       	add	r26, r30
     fc4:	bf 1f       	adc	r27, r31
     fc6:	68 94       	set
     fc8:	99 24       	eor	r9, r9
     fca:	93 f8       	bld	r9, 3
     fcc:	f9 01       	movw	r30, r18
     fce:	01 90       	ld	r0, Z+
     fd0:	0d 92       	st	X+, r0
     fd2:	9a 94       	dec	r9
     fd4:	e1 f7       	brne	.-8      	; 0xfce <NoteOff+0xa6>
				j++;
     fd6:	0f 5f       	subi	r16, 0xFF	; 255
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	28 5f       	subi	r18, 0xF8	; 248
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			tmp[i].current = 0;
			tmp[i].phase = 0;
		}
		int j = 0;
		for(int i = 0; i < ilosc_glosow; i++)
     fde:	a2 16       	cp	r10, r18
     fe0:	b3 06       	cpc	r11, r19
     fe2:	f1 f6       	brne	.-68     	; 0xfa0 <NoteOff+0x78>
			
		}
		
		for(int i = 0; i < MAX_VOICES; i++)
		{
			glos[i] = tmp[i];
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	fa 01       	movw	r30, r20
     fe8:	db 01       	movw	r26, r22
     fea:	01 90       	ld	r0, Z+
     fec:	0d 92       	st	X+, r0
     fee:	8a 95       	dec	r24
     ff0:	e1 f7       	brne	.-8      	; 0xfea <NoteOff+0xc2>
     ff2:	48 5f       	subi	r20, 0xF8	; 248
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	68 5f       	subi	r22, 0xF8	; 248
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
				j++;
			}
			
		}
		
		for(int i = 0; i < MAX_VOICES; i++)
     ffa:	4e 15       	cp	r20, r14
     ffc:	5f 05       	cpc	r21, r15
     ffe:	91 f7       	brne	.-28     	; 0xfe4 <NoteOff+0xbc>
		{
			glos[i] = tmp[i];
			
		}
		ilosc_glosow--;
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	cf 1a       	sub	r12, r31
    1004:	d1 08       	sbc	r13, r1
    1006:	d0 92 4b 05 	sts	0x054B, r13	; 0x80054b <ilosc_glosow+0x1>
    100a:	c0 92 4a 05 	sts	0x054A, r12	; 0x80054a <ilosc_glosow>
		
	}
	
}
    100e:	c0 5c       	subi	r28, 0xC0	; 192
    1010:	df 4f       	sbci	r29, 0xFF	; 255
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	08 95       	ret

00001034 <__divmodhi4>:
    1034:	97 fb       	bst	r25, 7
    1036:	07 2e       	mov	r0, r23
    1038:	16 f4       	brtc	.+4      	; 0x103e <__divmodhi4+0xa>
    103a:	00 94       	com	r0
    103c:	07 d0       	rcall	.+14     	; 0x104c <__divmodhi4_neg1>
    103e:	77 fd       	sbrc	r23, 7
    1040:	09 d0       	rcall	.+18     	; 0x1054 <__divmodhi4_neg2>
    1042:	0e 94 34 08 	call	0x1068	; 0x1068 <__udivmodhi4>
    1046:	07 fc       	sbrc	r0, 7
    1048:	05 d0       	rcall	.+10     	; 0x1054 <__divmodhi4_neg2>
    104a:	3e f4       	brtc	.+14     	; 0x105a <__divmodhi4_exit>

0000104c <__divmodhi4_neg1>:
    104c:	90 95       	com	r25
    104e:	81 95       	neg	r24
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__divmodhi4_neg2>:
    1054:	70 95       	com	r23
    1056:	61 95       	neg	r22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255

0000105a <__divmodhi4_exit>:
    105a:	08 95       	ret

0000105c <__tablejump2__>:
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	05 90       	lpm	r0, Z+
    1062:	f4 91       	lpm	r31, Z
    1064:	e0 2d       	mov	r30, r0
    1066:	09 94       	ijmp

00001068 <__udivmodhi4>:
    1068:	aa 1b       	sub	r26, r26
    106a:	bb 1b       	sub	r27, r27
    106c:	51 e1       	ldi	r21, 0x11	; 17
    106e:	07 c0       	rjmp	.+14     	; 0x107e <__udivmodhi4_ep>

00001070 <__udivmodhi4_loop>:
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	a6 17       	cp	r26, r22
    1076:	b7 07       	cpc	r27, r23
    1078:	10 f0       	brcs	.+4      	; 0x107e <__udivmodhi4_ep>
    107a:	a6 1b       	sub	r26, r22
    107c:	b7 0b       	sbc	r27, r23

0000107e <__udivmodhi4_ep>:
    107e:	88 1f       	adc	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	5a 95       	dec	r21
    1084:	a9 f7       	brne	.-22     	; 0x1070 <__udivmodhi4_loop>
    1086:	80 95       	com	r24
    1088:	90 95       	com	r25
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	08 95       	ret

00001090 <_exit>:
    1090:	f8 94       	cli

00001092 <__stop_program>:
    1092:	ff cf       	rjmp	.-2      	; 0x1092 <__stop_program>
